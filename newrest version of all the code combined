TAB 1 ASERIODS:


float shipX;//initial location
float shipY;//initial location
float shipAngle;
float direction;//ships's direction
PVector location;//ships's location
PVector velocity;//ship's speeds
PVector accel;//ship acceleration
PImage img;//this is the background image
boolean begin=true;
float rad1;
float rad2;
boolean switching=true; 
rocks[]newRocks;

 void setup() {
  size(1200, 700);
  img=loadImage("space.jpg");
  location = new PVector(width/2, height/2, 0);
  velocity = new PVector();
  accel = new PVector();
  shipX = width/2;
  shipY = height/2;
  shipAngle = 0.0;
  newRocks= new rocks[20];
  // function below is to create the 3 different types of rocks sizes
  if(switching==true){
  for(int i=0;i<newRocks.length;i++){
    newRocks[i]=new rocks(random(rad1,width-rad1),random(rad2,height-rad2),int(random(10)),int(random(10)),random(10,50),random(10,50));
    if(i>=10){
      switching=false;
    }
  }
  }else{
    for(int i=newRocks.length/2;i<newRocks.length;i++){
      newRocks[i]= new rocks(random(rad1,width-rad1),random(rad2,height-rad2),int(random(-10,10)),int(random(-10,10)),random(50,100),random(50,100));
    }
  }
 }
    
void draw() {
  
  if(begin==true){
    drawStartScreen();
  }else{
    // is all code undeterermed for the ship
checkKeys();
background(img);
stroke(0);
velocity.add(accel);
location.add(velocity);
drawShip();
accel.set(0, 0, 0);
if (velocity.mag() != 0) velocity.mult(0.99);
//wrap function
if (location.x<0) {
location.x = location.x+width;
}
if (location.x>width) {
location.x = 0;
}
if (location.y<0) {
location.y = location.y+height;
}
if (location.y>height) {
location.y = 0;
}
// above is undetermined ship code
for(int i=0;i<newRocks.length;i++){
  newRocks[i].displayRock();
  newRocks[i].moveRock();
  newRocks[i].bounceRock();
}
  }
}


TAB 2 FUNCTIONS:



void drawStartScreen(){
      background(0);
      fill(random(255),random(255),random(255));
      textSize(50);
      textAlign(CENTER);
      text("Wecome to Asteriods",600,200);
      textSize(25);
      text("Press any button to begin",600,300);
      if(keyPressed){
        begin=false;
      }
      text("There is no winning try ot survive;{",600,500);
      text("Don't get hit by the asteriods or ufo's or you will die(duh).",600,530);
      text("Which will result in you restarting your precious progress",600,560);
      textSize(50);      
      text("Hence the game name ASTERIODS!!!",600,620);
}




TAB 3 ROCKS:




class rocks{
  float xCoor;
  float yCoor;
  int xSpeed;
  int ySpeed;
  rocks(float x, float y, int xs, int ys,float r1, float r2){
    xCoor=x;
    yCoor=y;
    xSpeed=xs;
    ySpeed=ys;
    rad1=r1;
    rad2=r2;
  }
  void displayRock(){// displays our rocks to destroy
    fill(165,165,165,120);
    strokeWeight(2);
    stroke(random(255),random(255),random(255));
    ellipse(xCoor,yCoor,rad1,rad2);
  }
  void moveRock(){//moves the rock
    xCoor+=xSpeed;
    yCoor+=ySpeed;
  }
  void bounceRock(){//keeps rocks on screen
    if(xCoor<=0){
      xCoor=width;
      //xSpeed*=-1;
    }
    if(yCoor<=0){
      yCoor=height;
     // ySpeed*=-1;
    }
    if(xCoor>=width){
      xCoor=0;
     // xSpeed*=-1;
    }
    if(yCoor>=height){
      yCoor=0;
     // ySpeed*=-1;
    }
  }
}





TAB 4 SHIP:


// this is ship code

void drawShip() {
pushMatrix();
// Translate ship origin
translate(location.x, location.y);
// Rotate ship
rotate(direction);
// Display the ship
fill(random(255),random(255),random(255),80);
stroke(255,0,0);
strokeWeight(2);
triangle(-10, 20, 10, 20, 0, -20);
// if the ship is accelerating draw a thruster
if (accel.mag() != 0) {
float thrusterCol = random(0,255);//thuster feature that appears behind the ship when accelerating
fill(thrusterCol, thrusterCol/2, random(255),80);
strokeWeight(1);
stroke(0,255,0);
triangle(-5, 22, 5, 22, 0, 40);
} 
popMatrix();
}
//moving the ship
void checkKeys() {
if (keyPressed && key == CODED) {
if (keyCode == LEFT) {
direction-=0.1;
}
else if (keyCode == RIGHT) {
direction+=0.1;
}
else if (keyCode == UP) {
float totalAccel = 0.2; // how much ship accelerates
accel.x = totalAccel * sin(direction); // total accel
accel.y = -totalAccel * cos(direction); // total accel
}
}
}


DONE
DONE
DONE
DONE
DONE
JACK EDIT SOME

